// <auto-generated />
using System;
using EFSamples.FinanceModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFSamples.Migrations.FinanceModel
{
    [DbContext(typeof(FinanceModelContext))]
    [Migration("20200528182015_Mig-Base")]
    partial class MigBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("EFSamples.FinanceModel.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Closed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Activities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Activity");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.CashDividend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExDivDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PerShareAmount")
                        .HasColumnType("TEXT");

                    b.Property<long>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SecurityId");

                    b.ToTable("Dividends");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DividendId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("DividendId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.FinancialResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cumulative")
                        .HasColumnType("INTEGER");

                    b.Property<long>("QuarterlyReportId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuarterlyReportId");

                    b.ToTable("FinancialResults");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.Lot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("SharesInActivityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SharesInActivityId")
                        .IsUnique();

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.LotAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CostBasis")
                        .HasColumnType("TEXT");

                    b.Property<long>("LotId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Proceeds")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<long>("SharesOutActivityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.HasIndex("SharesOutActivityId");

                    b.ToTable("LotAssignments");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<long>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SplitAdjustmentDenominator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SplitAdjustmentNumerator")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SecurityId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.QuarterlyReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quarter")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("QuarterEndDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SecurityId");

                    b.ToTable("QuarterlyReports");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.Security", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Retired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Securities");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.CashActivity", b =>
                {
                    b.HasBaseType("EFSamples.FinanceModel.Activity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("CashActivity");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.SharesActivity", b =>
                {
                    b.HasBaseType("EFSamples.FinanceModel.Activity");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<long>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("SharesActivity");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.SharesInActivity", b =>
                {
                    b.HasBaseType("EFSamples.FinanceModel.SharesActivity");

                    b.Property<decimal>("CostBasis")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("SharesInActivity");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.SharesOutActivity", b =>
                {
                    b.HasBaseType("EFSamples.FinanceModel.SharesActivity");

                    b.Property<decimal>("Proceeds")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("SharesOutActivity");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.Activity", b =>
                {
                    b.HasOne("EFSamples.FinanceModel.Event", "Event")
                        .WithMany("Activities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFSamples.FinanceModel.CashDividend", b =>
                {
                    b.HasOne("EFSamples.FinanceModel.Security", "Security")
                        .WithMany("CashDividends")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFSamples.FinanceModel.Event", b =>
                {
                    b.HasOne("EFSamples.FinanceModel.Account", "Account")
                        .WithMany("Events")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFSamples.FinanceModel.CashDividend", "Dividend")
                        .WithMany("Events")
                        .HasForeignKey("DividendId");
                });

            modelBuilder.Entity("EFSamples.FinanceModel.FinancialResult", b =>
                {
                    b.HasOne("EFSamples.FinanceModel.QuarterlyReport", "QuarterlyReport")
                        .WithMany("Results")
                        .HasForeignKey("QuarterlyReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFSamples.FinanceModel.Lot", b =>
                {
                    b.HasOne("EFSamples.FinanceModel.SharesInActivity", "SharesInActivity")
                        .WithOne("Lot")
                        .HasForeignKey("EFSamples.FinanceModel.Lot", "SharesInActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFSamples.FinanceModel.LotAssignment", b =>
                {
                    b.HasOne("EFSamples.FinanceModel.Lot", "Lot")
                        .WithMany("LotAssignments")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFSamples.FinanceModel.SharesOutActivity", "SharesOutActivity")
                        .WithMany("LotAssignments")
                        .HasForeignKey("SharesOutActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFSamples.FinanceModel.Price", b =>
                {
                    b.HasOne("EFSamples.FinanceModel.Security", "Security")
                        .WithMany("Prices")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFSamples.FinanceModel.QuarterlyReport", b =>
                {
                    b.HasOne("EFSamples.FinanceModel.Security", "Security")
                        .WithMany("QuarterlyReports")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
